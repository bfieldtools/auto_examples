.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_flatten_mesh.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_flatten_mesh.py:


Flatten mesh using conformal mapping
=============================================

Map 3D mesh to a 2D (complex) plane with angle-preserving (conformal) mapping

Based on these course notes
https://www.cs.cmu.edu/~kmcrane/Projects/DDG/
section 7.4.


.. code-block:: default


    import numpy as np
    from bfieldtools.flatten_mesh import flatten_mesh
    from bfieldtools.flatten_mesh import mesh2plane
    from bfieldtools.flatten_mesh import plane2mesh
    from bfieldtools.utils import load_example_mesh









.. code-block:: default

    from mayavi import mlab
    from bfieldtools.viz import plot_data_on_vertices, plot_mesh, plot_data_on_faces

    mesh = load_example_mesh("meg_helmet", process=False)
    u, v, mesh2d = flatten_mesh(mesh, _lambda=0.80)

    plot_data_on_vertices(mesh, u, ncolors=15)
    plot_data_on_vertices(mesh, v, ncolors=15)




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/images/sphx_glr_flatten_mesh_001.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/images/sphx_glr_flatten_mesh_002.png
            :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <mayavi.modules.surface.Surface object at 0x7fa1d9f32ad0>



lls = np.linspace(0.01,1.0, 100)
mm = []
for ll in lls:
    u, v, mesh2d = flatten_mesh(mesh, _lambda=ll)
    d = mesh2d.area_faces / mesh.area_faces
    mm.append(np.std(d)/np.mean(d))
    print(np.std(d)/np.mean(d))
plt.plot(lls, mm)


.. code-block:: default

    plot_data_on_faces(mesh2d, mesh2d.area_faces / mesh.area_faces)




.. image:: /auto_examples/images/sphx_glr_flatten_mesh_003.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <mayavi.modules.surface.Surface object at 0x7fa1d9b796b0>




.. code-block:: default

    from bfieldtools.mesh_calculus import gradient

    gx = gradient(u, mesh)
    gy = gradient(v, mesh)
    cos = np.sum(gx * gy, axis=0) / (
        np.linalg.norm(gx, axis=0) * np.linalg.norm(gy, axis=0)
    )
    plot_data_on_faces(mesh, cos, vmin=-1, vmax=1)
    mlab.quiver3d(*mesh.triangles_center.T, *gx, color=(1, 0, 0), mode="arrow")
    q = mlab.quiver3d(*mesh.triangles_center.T, *gy, color=(0, 0, 1), mode="arrow")
    q.scene.isometric_view()




.. image:: /auto_examples/images/sphx_glr_flatten_mesh_004.png
    :class: sphx-glr-single-img






.. code-block:: default

    d = np.sqrt(3 / 4)
    m = np.min((u.min(), v.min()))
    mm = np.min((u.max(), v.max()))
    xx = np.linspace(m * 1.05, mm * 1.05, 12)
    yy = np.linspace(m * 1.05, mm * 1.05, 12) * d
    p = np.array(np.meshgrid(xx, yy, 0, indexing="ij"))
    p[0, :, ::2] += (xx[1] - xx[0]) * 0.5

    p = p.reshape(3, -1).T

    pp = plane2mesh(p, mesh, u, v)

    plot_data_on_vertices(mesh, u, ncolors=15)
    mlab.points3d(*pp.T, scale_factor=0.01)



.. image:: /auto_examples/images/sphx_glr_flatten_mesh_005.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <mayavi.modules.glyph.Glyph object at 0x7fa1d9895350>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.126 seconds)

**Estimated memory usage:**  173 MB


.. _sphx_glr_download_auto_examples_flatten_mesh.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: flatten_mesh.py <flatten_mesh.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: flatten_mesh.ipynb <flatten_mesh.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
