.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_validation_inductance_comparison.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_validation_inductance_comparison.py:


Test diagonal of inductance matrix
===================================================

Use different number of quadrature points and two different implementations


.. code-block:: default


    import numpy as np
    import matplotlib.pyplot as plt

    from bfieldtools.utils import load_example_mesh

    coilmesh = load_example_mesh("10x10_plane")

    from bfieldtools.mesh_impedance import self_inductance_matrix, mutual_inductance_matrix


    M5 = mutual_inductance_matrix(coilmesh, coilmesh, quad_degree=5)
    M6 = mutual_inductance_matrix(coilmesh, coilmesh, quad_degree=6)
    M7 = mutual_inductance_matrix(coilmesh, coilmesh, quad_degree=7)

    plt.figure()
    for m in (M5, M6, M7):
        plt.plot(np.diag(m))

    MM5 = self_inductance_matrix(coilmesh, quad_degree=5, analytic_self_coupling=True)
    MM6 = self_inductance_matrix(coilmesh, quad_degree=6, analytic_self_coupling=True)
    MM7 = self_inductance_matrix(coilmesh, quad_degree=7, analytic_self_coupling=True)




.. image:: /auto_examples/validation/images/sphx_glr_inductance_comparison_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Estimating 2432 MiB required for 676 by 676 vertices...
    Computing inductance matrix in 20 chunks (10492 MiB memory free),              when approx_far=True using more chunks is faster...
    Computing triangle-coupling matrix
    Estimating 2432 MiB required for 676 by 676 vertices...
    Computing inductance matrix in 20 chunks (10495 MiB memory free),              when approx_far=True using more chunks is faster...
    Computing triangle-coupling matrix
    Estimating 2432 MiB required for 676 by 676 vertices...
    Computing inductance matrix in 20 chunks (10499 MiB memory free),              when approx_far=True using more chunks is faster...
    Computing triangle-coupling matrix
    Estimating 2432 MiB required for 676 by 676 vertices...
    Computing inductance matrix in 20 chunks (10500 MiB memory free),              when approx_far=True using more chunks is faster...
    Computing triangle-coupling matrix
    Estimating 2432 MiB required for 676 by 676 vertices...
    Computing inductance matrix in 20 chunks (10508 MiB memory free),              when approx_far=True using more chunks is faster...
    Computing triangle-coupling matrix
    Estimating 2432 MiB required for 676 by 676 vertices...
    Computing inductance matrix in 20 chunks (10508 MiB memory free),              when approx_far=True using more chunks is faster...
    Computing triangle-coupling matrix





.. code-block:: default


    plt.gca().set_prop_cycle(None)
    for m in (MM5, MM6, MM7):
        plt.plot(np.diag(m), "--")



.. image:: /auto_examples/validation/images/sphx_glr_inductance_comparison_002.png
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  15.484 seconds)


.. _sphx_glr_download_auto_examples_validation_inductance_comparison.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: inductance_comparison.py <inductance_comparison.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: inductance_comparison.ipynb <inductance_comparison.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
